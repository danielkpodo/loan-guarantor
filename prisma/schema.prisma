generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  loans          Loan[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id               String                  @id @default(uuid())
  firstName        String
  lastName         String
  email            String                  @unique
  maritalStatus    MaritalStatusOptions?   @default(SINGLE)
  employmentStatus EmploymentStatusOptions @default(OTHER)
  employer         String
  dateOfBirth      DateTime
  cardType         CardOptions             @default(OTHER)
  cardUniqueNo     String
  address          String
  phoneNumber      String
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  loans            Loan[]
}

model Loan {
  id            String      @id @default(uuid())
  principal     Float       @db.DoublePrecision
  rate          Float       @db.DoublePrecision
  time          Int
  amountPayable Float       @db.DoublePrecision
  userId        String
  createdBy     User        @relation(fields: [userId], references: [id])
  customerId    String
  customer      Customer    @relation(fields: [customerId], references: [id])
  status        LoanStatus? @default(APPROVED)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum LoanStatus {
  APPROVED
  DENIED
  PROCESSING
}

enum MaritalStatusOptions {
  SINGLE
  MARRIED
  DOMESTIC_PARTNERSHIP
  DIVORCED
  SEPARATED
  WIDOWED
  CIVIL_UNION
  OTHER
  PREFER_NOT_TO_SAY
}

enum EmploymentStatusOptions {
  FULL_TIME
  PART_TIME
  CONTRACTOR
  FREELANCER
  TEMPORARY_EMPLOYEE
  INTERN
  APPRENTICE
  SELF_EMPLOYED
  UNEMPLOYED
  RETIRED
  STUDENT
  HOME_MAKER
  OTHER
}

enum CardOptions {
  NHIS
  VOTER
  DVLA
  NATIONAL_CARD
  SNNIT
  OTHER
}
